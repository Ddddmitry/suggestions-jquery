diff --git a/src/includes/geolocation.js b/src/includes/geolocation.js
index e735181..af93abd 100644
--- a/src/includes/geolocation.js
+++ b/src/includes/geolocation.js
@@ -28,7 +28,7 @@ var methods = {
             that.geoLocation.resolve(providedLocation);
         } else {
             if (!locationRequest) {
-                locationRequest = $.ajax(that.getAjaxParams('iplocate'));
+                locationRequest = $.ajax(that.getAjaxParams('iplocate/address'));
             }
 
             locationRequest
diff --git a/src/includes/suggestions.js b/src/includes/suggestions.js
index 776dfd7..1059a1e 100644
--- a/src/includes/suggestions.js
+++ b/src/includes/suggestions.js
@@ -15,12 +15,12 @@ var serviceMethods = {
         },
         addTypeInUrl: true
     },
-    'iplocate': {
+    'iplocate/address': {
         defaultParams: {
             type: 'GET',
             dataType: 'json'
         },
-        addTypeInUrl: true
+        addTypeInUrl: false
     },
     'status': {
         defaultParams: {
diff --git a/test/specs/geolocation_spec.js b/test/specs/geolocation_spec.js
index 33bab8e..b8bd6ab 100644
--- a/test/specs/geolocation_spec.js
+++ b/test/specs/geolocation_spec.js
@@ -38,8 +38,47 @@ describe('Geolocation', function () {
         expect(this.server.requests[0].url).toContain('iplocate/address');
     });
 
-    it('Should send location with request', function () {
+    it('Should send geolocation request for party', function () {
+        $.Suggestions.resetLocation();
+        this.server.requests.length = 0;
+        this.server.respond('GET', /status\/party/, [
+            200, 
+            { 'Content-type': 'application/json' },
+            JSON.stringify({
+                enrich: false,
+                name: "party",
+                search: true,
+                state: "ENABLED"
+            })
+        ]);
+        this.$input.suggestions({
+            serviceUrl: serviceUrl,
+            type: 'PARTY'
+        });
+        expect(this.server.requests[1].url).toContain('iplocate/address');
+    });
 
+    it('Should send geolocation request for bank', function () {
+        $.Suggestions.resetLocation();
+        this.server.requests.length = 0;
+        this.server.respond('GET', /status\/bank/, [
+            200, 
+            { 'Content-type': 'application/json' },
+            JSON.stringify({
+                enrich: false,
+                name: "bank",
+                search: true,
+                state: "ENABLED"
+            })
+        ]);
+        this.$input.suggestions({
+            serviceUrl: serviceUrl,
+            type: 'BANK'
+        });
+        expect(this.server.requests[1].url).toContain('iplocate/address');
+    });
+
+    it('Should send location with request', function () {
         this.server.respond('GET', /iplocate\/address/, [200, { 'Content-type': 'application/json' }, JSON.stringify({
             location: {
                 data: {
